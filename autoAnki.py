#! python3
import genanki, os, random, pyperclip, re, sys, logging
from gtts import gTTS
from flask import Flask, request, send_file, render_template

# Text to speech function
def text_to_speech_korean(word, filename='output.mp3'):
    tts = gTTS(text=word, lang='ko')
    tts.save(filename)
    logging.debug(f'Audio clip saved as {filename}')

# Getting media paths function
def get_media_paths(mediaDir):
    mediaFiles = os.listdir(mediaDir)
    for i in range(len(mediaFiles)):
        mediaFiles[i] = '..\\'+mediaDir+'\\'+mediaFiles[i]
    return mediaFiles

# Get desired name from args
def get_desired_name():
    defaultName = 'autoGeneratedDeck'
    if len(sys.argv) > 1:
        return sys.argv[1]
    else:
        return defaultName

# Create and Enter Directory
def create_enter_dir(targetDir):
    if not os.path.exists(targetDir):
        os.mkdir(targetDir)
    os.chdir(targetDir)
        

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        deck_name_input = request.form['deck_name']
        user_input = request.form['user_text']
        file_path = run_program(deck_name_input, user_input)
        return send_file(file_path, as_attachment=True)
    return render_template('index.html')


def run_program(deck_name_input, input_text):
    # Create a list of korean - english pairs
    # vocabString = pyperclip.paste()
    vocabString = input_text
    pattern = r"([\uac00-\ud7af,! ]+) : ([A-Za-z ,\?'!]+)"
    vocabPairs = re.findall(pattern, vocabString)

    # Create Anki Deck
    deckId = random.randrange(1 << 30, 1 << 31)
    # deckName = get_desired_name()
    deckName = deck_name_input
    logging.debug('Deck Id is ' + str(deckId))
    deck = genanki.Deck(
        deckId,
        deckName)

    # Create Anki Model
    modelId = random.randrange(1 << 30, 1 << 31)
    logging.debug('Model Id is ' + str(modelId))
    model = genanki.Model(
        modelId,
        'Vocab Model',
        fields=[
            {'name': 'Question'},
            {'name': 'Answer'},
            {'name': 'MyMedia'},
            ],
        templates=[
            {
                'name':'Card 1',
                'qfmt':'''<h3 style="text-align: center;"=>{{Question}}</h3><br>''',
                'afmt':'''<h3 style="text-align: center;"=>{{FrontSide}}</h3>
                            <hr id="answer">
                            <h3 style="text-align: center;"=>{{Answer}}</h3><br>
                            {{MyMedia}}'''
            },
        ])
            

    # Navigate to assets directory
    script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    os.chdir(script_directory + '\\..')
    create_enter_dir(deckName)

    # Navigate to audio directory
    audioDir = 'AudioFiles'
    create_enter_dir(audioDir)

    # Add notes
    for korean, english in vocabPairs:
        text_to_speech_korean(korean, filename=korean+'.mp3')
        sound = '[sound:'+korean+'.mp3]'
        note = genanki.Note(
            model=model,
            fields=[english, korean, sound])
        deck.add_note(note)
        # print('Adding note for ' + korean)

    # Navigate to assets folder
    os.chdir('..')

    # Save media to package
    package = genanki.Package(deck)
    package.media_files = get_media_paths(audioDir)

    # Save .akpg file
    create_enter_dir('AnkiPackages')
    currentDir = os.getcwd()
    packageName = deckName
    path = os.path.join(currentDir, packageName + '.apkg')
    package.write_to_file(packageName + '.apkg')
    print('Created new deck at ' + path)
    return path
    # os.startfile(path)


if __name__ == '__main__':
    app.run(debug=True)




